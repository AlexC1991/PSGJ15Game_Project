//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/KramerZJ/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectDungeonCrawlerPJ15
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player normal"",
            ""id"": ""75d13db8-b08b-451e-bbd0-82c50e50ea8e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cd9db841-ee89-43ff-bcee-0a3b937e0d14"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c94bcd10-c4cf-4dfb-a4d9-4396cdaac2f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c3a894b-6777-475e-b725-2ad4e7c016cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bbb8d707-8c37-4fb8-90bd-2cae6cef4dcd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b1ce1229-7fba-478b-82e3-e6b53c5852ef"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bbefdfcb-4d27-45fa-a7d0-975c1fd9b318"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4633ba71-cee9-4a2c-80d2-82d465a93279"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90990425-dace-4797-9b05-2f6eae23aa18"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""JoyStick"",
                    ""id"": ""17b1e102-d26b-4338-94aa-6ed93fb52792"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d34a56c7-c849-471a-9271-d3448749f225"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e23e92e5-6d6c-4109-907a-a6c6b459ca83"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d16fb67-6b8f-4d39-bcdd-a2d5729d8cbc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5aa479a1-435e-4999-b15b-7bb410e7bffb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa54b245-65ef-4904-8b6b-de2251f55d57"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b32fd58-6aec-4109-ab78-f0badc4a95c2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player on Wall"",
            ""id"": ""52aafb5a-1f03-4066-a760-563149b93adf"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""16b8c907-0c30-430d-8094-d7c5c3a74acd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2105991b-5c54-4d77-8fc0-b6bde3aa5e36"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player normal
            m_Playernormal = asset.FindActionMap("Player normal", throwIfNotFound: true);
            m_Playernormal_Movement = m_Playernormal.FindAction("Movement", throwIfNotFound: true);
            m_Playernormal_Jump = m_Playernormal.FindAction("Jump", throwIfNotFound: true);
            m_Playernormal_Look = m_Playernormal.FindAction("Look", throwIfNotFound: true);
            // Player on Wall
            m_PlayeronWall = asset.FindActionMap("Player on Wall", throwIfNotFound: true);
            m_PlayeronWall_Newaction = m_PlayeronWall.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player normal
        private readonly InputActionMap m_Playernormal;
        private List<IPlayernormalActions> m_PlayernormalActionsCallbackInterfaces = new List<IPlayernormalActions>();
        private readonly InputAction m_Playernormal_Movement;
        private readonly InputAction m_Playernormal_Jump;
        private readonly InputAction m_Playernormal_Look;
        public struct PlayernormalActions
        {
            private @PlayerControls m_Wrapper;
            public PlayernormalActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Playernormal_Movement;
            public InputAction @Jump => m_Wrapper.m_Playernormal_Jump;
            public InputAction @Look => m_Wrapper.m_Playernormal_Look;
            public InputActionMap Get() { return m_Wrapper.m_Playernormal; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayernormalActions set) { return set.Get(); }
            public void AddCallbacks(IPlayernormalActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayernormalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayernormalActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }

            private void UnregisterCallbacks(IPlayernormalActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
            }

            public void RemoveCallbacks(IPlayernormalActions instance)
            {
                if (m_Wrapper.m_PlayernormalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayernormalActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayernormalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayernormalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayernormalActions @Playernormal => new PlayernormalActions(this);

        // Player on Wall
        private readonly InputActionMap m_PlayeronWall;
        private List<IPlayeronWallActions> m_PlayeronWallActionsCallbackInterfaces = new List<IPlayeronWallActions>();
        private readonly InputAction m_PlayeronWall_Newaction;
        public struct PlayeronWallActions
        {
            private @PlayerControls m_Wrapper;
            public PlayeronWallActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_PlayeronWall_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_PlayeronWall; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayeronWallActions set) { return set.Get(); }
            public void AddCallbacks(IPlayeronWallActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayeronWallActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayeronWallActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IPlayeronWallActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IPlayeronWallActions instance)
            {
                if (m_Wrapper.m_PlayeronWallActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayeronWallActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayeronWallActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayeronWallActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayeronWallActions @PlayeronWall => new PlayeronWallActions(this);
        public interface IPlayernormalActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
        }
        public interface IPlayeronWallActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
